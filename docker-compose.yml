version: "3"

networks:
  developnet:
    driver: bridge

services:
  # MySQL
  mysql:
    image: mysql:5.7.21
    container_name: mysql
    environment:
      - TZ=Japan
      - MYSQL_ROOT_PASSWORD=password123
      # Settings for Gitea
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=gitea
      - MYSQL_DATABASE=gitea
    restart: always
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf/:/etc/mysql/conf.d
    networks: 
      - developnet

  # Gitea : Git Server
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    environment:
      - TZ=Japan
      - USER_UID=1000
      - USER_GID=1000
      - SSH_PORT=10022
    restart: always
    networks:
      - developnet
    volumes:
      - ./gitea:/data
    ports:
      - 3020:3000
      - 10022:10022
    depends_on: 
      - mysql

  # Sonarqube : static analytics
  sonar_db:
    image: postgres:alpine
    container_name: sonarqube_postgresql
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    networks:
      - sonarnet
    volumes:
      - sonarqube_postgresql_data:/var/lib/postgresql/data

  sonarqube:
    image: sonarqube:8.2-community
    container_name: sonarqube
    depends_on:
      - sonar_db
    environment:
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonar_db/sonar
    networks:
      - sonarnet
    ports:
      - 9000:9000
      - 9092:9092
    volumes:
      - ./extensions:/opt/sonarqube/extensions
  
  # Drone CI : CI/CD tool
  drone-server:
    image: drone/drone:1.0.0-rc.4
    ports:
      - 3080:80
    volumes:
      - ./drone:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - developnet
    environment: 
      - TZ=Japan
      - DRONE_GET_ALWAYS_AUTH=false
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_SERVER_HOST=drone-server:80
      - DRONE_SERVER_PROTO=http
      - DRONE_TLS_AUTOCERT=false
      - DRONE_GITEA_SERVER=http://gitea:3000
    restart: always
  # Docker Repository
  docker-repo:
    image: registry:2.3.0
    networks:
      - developnet
    ports:
      - 5000:5000
    volumes:
      - ./registory:/var/lib/registry
    restart: always

networks:
  sonarnet:

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  sonarqube_postgresql_data:
